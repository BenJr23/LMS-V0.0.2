generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Subject {
  id          String            @id @default(cuid())
  name        String
  code        String            @unique
  createdById String            // Clerk userId
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  instances   SubjectInstance[]  // One-to-many relationship
}

model SubjectInstance {
  id             String            @id @default(cuid())
  teacherName    String
  grade          String
  section        String
  enrollment     Int               // 0 = Inactive, 1 = Active
  enrolmentCode  Int
  icon           String
  subjectId      String
  createdById    String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  subject        Subject           @relation(fields: [subjectId], references: [id])
  requirements   Requirement[]     // âœ… Renamed to keep naming consistency
  enrolments     Enrolment[]
  announcements  Announcement[]
  moduleFolders  ModuleFolder[]
  uploadedContents UploadedContent[]
}

model Requirement {
  id               String       @id @default(cuid())
  requirementNumber Int
  title            String?
  content          String?
  scoreBase        Int
  deadline         DateTime
  type             String
  subjectInstanceId String
  createdById      String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  subjectInstance  SubjectInstance @relation(fields: [subjectInstanceId], references: [id])
  submissions      Submission[]
}

model Enrolment {
  id                String    @id @default(cuid())
  userId            String    // Clerk userId
  subjectInstanceId String
  code              Int
  fullName          String
  email             String
  gradeLevel        String
  enrollmentStatus  String
  status            String
  hasNewContent     Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  subjectInstance   SubjectInstance @relation(fields: [subjectInstanceId], references: [id])
  submissions       Submission[]

  @@unique([userId, subjectInstanceId])
}

model Announcement {
  id                String    @id @default(cuid())
  subjectInstanceId String
  userId            String

  title             String
  content           String

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  subjectInstance   SubjectInstance @relation(fields: [subjectInstanceId], references: [id])
}

model ModuleFolder {
  id                String    @id @default(cuid())
  subjectInstanceId String
  userId            String
  folderName        String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  subjectInstance   SubjectInstance @relation(fields: [subjectInstanceId], references: [id])
  uploadedContents  UploadedContent[]
}

model UploadedContent {
  id                String    @id @default(cuid())
  subjectInstanceId String
  moduleFolderId    String
  fileName          String
  filePath          String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  subjectInstance   SubjectInstance @relation(fields: [subjectInstanceId], references: [id])
  moduleFolder      ModuleFolder    @relation(fields: [moduleFolderId], references: [id])
}

model Submission {
  id            String   @id @default(cuid())
  requirementId String
  enrollmentId  String
  userId        String

  title         String?
  content       String?
  filePath      String?

  graded        Boolean  @default(false)
  score         Float?
  feedback      String?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  requirement   Requirement @relation(fields: [requirementId], references: [id])
  enrollment    Enrolment    @relation(fields: [enrollmentId], references: [id])
}
